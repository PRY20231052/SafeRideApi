from rest_framework import serializers
from api.models.location import Location
from api.models.route import Route
from api.serializers.edge_serializer import EdgeSerializer
from api.serializers.location_serializer import LocationSerializer

class RouteSerializer(serializers.Serializer):
    # Required data
    origin = LocationSerializer()
    waypoints = LocationSerializer(many=True)

    # Not required data (will be generated by the model)
    departure_time = serializers.DateTimeField(required=False)
    arrival_time = serializers.DateTimeField(required=False)
    distance_meters = serializers.FloatField(required=False)
    eta_seconds = serializers.FloatField(required=False)
    path_nodes = LocationSerializer(many=True, required=False)
    path_edges = EdgeSerializer(many=True, required=False)
    path_geojson = serializers.DictField(required=False)
    
    # Creates a Route instance given a route json object
    def create(self, data):
        origin = Location(**data.pop('origin')) # unpacks a dictionary and assigns its values to the corresponding parameters

        waypoints_data = data.pop('waypoints')
        waypoints = [Location(**waypoint_data) for waypoint_data in waypoints_data]

        return Route(origin=origin, waypoints=waypoints)